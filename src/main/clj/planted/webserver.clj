(ns planted.webserver
  (:use [org.httpkit.server :only [run-server]])
  (:require [clojure.tools.logging :as log]
            [com.stuartsierra.component :as component]
            [compojure.core :refer [routes ANY POST GET]]
            [compojure.route :as route]
            [liberator.core :refer [resource defresource get-options]]
            [ring.middleware.content-type :refer [wrap-content-type]]
            [ring.middleware.not-modified :refer [wrap-not-modified]]
            [ring.middleware.params :refer [wrap-params]]
            [ring.util.response :refer [content-type resource-response]]))

;; Adapted from https://github.com/duelinmarkers/ring-request-logging
;; Logs the request details, the start/end time and any exceptions
(defn log-request [handler]
  (fn [req]
    (log/info "Request start:" (:request-method req) (:uri req) (:query-string req))
    (log/trace "Request map:" (pr-str req))
    (try
      (let [res (handler req)]
        (log/info "Request end:" (:uri req) (:status res))
        res)
      (catch Throwable t
        (log/error t "Unhandled throwable")
        (throw t)))))

(defn setup-web-server
  "Defines the Planted web server, which includes the REST web services and serving of static html/js files.
  The static assets should have been composed beforehand via grunt."
  [db]
  (routes
    ;; TODO services here...
    ;; (ANY "/data/v1/:todo/:placeholder" [todo placeholder] ...

    ;; Planted is a single-page app. This means, whatever URL is actually requested by the browser, we're always going
    ;; to return the same javascript app, which will internally detect the URL and render appropriately.
    ;; TODO in the future, this can/will be extended to prerender the javascript app server side
    (GET "/planted*" {{path :*} :route-params}
         (if (.endsWith path "js")
           (content-type (resource-response "public/app.js") "text/javascript")
           (if (.endsWith path "css")
             (content-type (resource-response "public/css/app.css") "text/css")
             (content-type (resource-response "public/index.html") "text/html"))))

    ;; Static files are generated by the grunt build, serving them here is just passing them through
    ;; This call defaults to using "resources/public" folder as source
    (route/resources "/")
    (route/not-found "Not found")))

(defn wrap-web-server
  "Initializes the application web request handling and initializes some other ring request handlers to enhance it."
  [db]
  (-> (setup-web-server db)

      ;; Ring middleware libraries to plug in some handy functionality
      wrap-not-modified
      wrap-content-type
      wrap-params

      ;; Log everything that comes in
      log-request))

(defrecord WebServer [bind webserver]
  component/Lifecycle

  (start [component]
    (log/info "Starting Planted web server on" bind)
    (if webserver
      component
      (let [database (:db (:database component))
            instance (run-server (wrap-web-server database) {:port bind})]
        (assoc component :webserver instance))))

  (stop [component]
    (log/info "Stopping Planted web server")
    (if (not webserver)
      component
      (do ((:webserver component) :timeout 250)
        (assoc component :webserver nil)))))

(defn new-webserver [bind]
  (map->WebServer {:port bind}))